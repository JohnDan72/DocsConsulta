--------------------------------------------------------------------------
Create

* insertOne: db.<collection>.insertOne({ <data> })
    - db.users.insertOne({ 
        id: 1,
        name: 'Juan Dan',
        tel: 2221063405
    })
    - db.users.insertOne({ id: 2 , name: 'Daniel'});
* insertMany: db.<collection>.insertMany([
                                            {<data-1>} , 
                                            {<data-2>} , 
                                            ... , 
                                            { <data-n> }
                                        ])
    - db.users.insertMany([
                            {
                                "nombre": "Juan Pablo",
                                "edad": 28
                            },
                            {
                                "nombre": "Sebastian Sanchez",
                                "edad": 28
                            },
                            {
                                "nombre": "Mario Gonzalez",
                                "edad": 28
                            }
                        ],{ ordered: false}) //inserta todos los que pueda sin tomar en cuenta los fails
--------------------------------------------------------------------------

Read
* findOne: db.<collection>.findOne({ <where> }) , .pretty() to show json as better as it can
    - db.users.findOne({ name: 'Daniel' })
    - db.users.findOne({ edad: 24})
* find: db.<coll>.find({ <where> }).pretty()
    - db.users.find({ edad: {$gt: 40}}) //all users where their edad is greater than 40
    - db.users.find({ name: /D/ }) // all users where their name like '%D%'
    - db.users.find({ name: {$regex: /^d/i }}) // all users where their name starts with d/D
* find ventas que superen objetivo y que el objetivo sea menor a 100
    (solo muestra venta y objetivo, omite _id)
    -   db.ventas.find(
            {
                $expr: {
                    $and: [
                        {$gt: ["$ventas","$objetivo"]} ,
                        { $lt:["$objetivo",100]}
                    ]
                }
            },
            { venta: 1, objetivo: 1, _id: 0 }
        )
* find usuarios.nombre usuarios.edad que inicien en D/d ordenados por edad descendente
    -   db.usuarios.find(
            {nombre: {$regex: /^d/i}},
            {nombre: 1 , edad: 1, _id: 0}
        ).sort({edad: -1}) 
* group with aggregation (obtiene los nombres con un array de los usuarios)
    db.usuarios.aggregate([
        {
            $group:{
                _id: { "$edad" },
                total: { $sum: 1},
                nombres: {$push: "$nombre"}
            }
        },
        {
            $match: { "total": { $lt: 100 } }
        }
    ])
* sort , skip y limit
    db.empleados.find({},{EmpID: 1 , Nombre: 1 , Apellido: 1 , _id: 0})
                .sort({EmpID: 1})
                .skip(2)
                .limit(4)
                .pretty()
* .$ operator
    //muestra todas las aficiones
    db.users.find({aficiones: "correr"},{ _id: 0})
    //solo muestra el campo validado
    db.users.find({aficiones: "correr"},{"aficiones.$": 1 _id: 0})
    // muestra dos aficiones $slice:[saltos,escoge]
    db.users.find({nombre: {$regex: /da/i}},{aficiones: {$slice: [1,2]}, _id: 0})
--------------------------------------------------------------------------

Update
* updateOne({<filter>},{<set>})
* update({<filter>},{<set>})
    db.users.updateOne(
        {
            nombre: "Juan Daniel"
        },
        {
            $set: 
                {
                    notas: [
                            {
                                anio:1,
                                mates:98,
                                ingles:89
                            },
                            {
                                anio:2,
                                mates:80,
                                ingles:78
                            },
                            {
                                anio:3,
                                mates:78,
                                ingles:56
                            }
                    ]
                }
        }
    )
    // with $unset
    db.users.update({id:{$exists: 1}},{$unset:{id:''}})

* updateMany({<filter>},{<set>})
    db.users.updateMany({},{$set: {aficiones: ['1','2','3','4',...]}})
    //update aficiones where (20<=edad<=24) U (edad=50)
    db.users.updateMany(
        {
            $or: 
                [
                        {$and:[ {edad: {$gte: 20}}, {edad: {$lte: 24}}]} ,
                        {edad: 50}
                ]
        },
        {
            $set:
                { 
                    aficiones: ['otro 1', 'otro 2','otro 3']
                }
        }
    )
--------------------------------------------------------------------------

Delete

* deleteOne({<filter>})
    deleteOne({nombre: 'Mario'});

* deleteMany({<filter>})
    //borrar todos los users que empiecen con d/D su nombre
    deleteMany({ nombre: {$regex: /^d/i }})

* db.users.drop() // borrar collection

* delete with update
    update({ nombre: {$regex: /^d/i }},{$set:{status: false}})

* drop database
    use <database>
    db.dropDatabase()
--------------------------------------------------------------------------


Import json
desde cmd de windows (no shell mongodb)
* mongoimport <path file>.json -d <dbName> -c <collection name> --jsonArray --drop